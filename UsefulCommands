 # How many packages and modules are there?
#directory=$(pwd)
directory="/etc/verdaccio/storage"

#watch ' echo "---------------------------------------------------" && echo "Total Modules:::" && find /etc/verdaccio/storage -maxdepth 1 -type d | wc -l && echo "---------------------------------------------------" && echo "Total Packages:::" && find /etc/verdaccio/storage -iname "*.tgz" | wc -l && echo "---------------------------------------------------" '
watch ' echo "---------------------------------------------------" && echo "Total Modules:::" && find $directory -maxdepth 1 -type d | wc -l && echo "---------------------------------------------------" && echo "Total Packages:::" && find $directory -iname "*.tgz" | wc -l && echo "---------------------------------------------------" '


# Another good one

#watch -d ' echo "---------------------------------------------------" && echo "Total Modules:::" && find /etc/verdaccio/storage -maxdepth 1 -type d | wc -l && echo "---------------------------------------------------" && echo "Total Packages:::" && find /etc/verdaccio/storage -iname "*.tgz" | wc -l && echo "---------------------------------------------------" && echo "Total Size:::" && du -cksh /etc/verdaccio/storage && echo "---------------------------------------------------" '
watch -d ' echo "---------------------------------------------------" && echo "Total Modules:::" && find $directory -maxdepth 1 -type d | wc -l && echo "---------------------------------------------------" && echo "Total Packages:::" && find $directory -iname "*.tgz" | wc -l && echo "---------------------------------------------------" && echo "Total Size:::" && du -cksh $directory && echo "---------------------------------------------------" '

#  One More
#watch -d ' echo "---------------------------------------------------" && echo "Total Modules:::" && find /etc/verdaccio/storage -maxdepth 1 -type d | wc -l && echo "---------------------------------------------------" && echo "Total Packages:::" && find /etc/verdaccio/storage -iname "*.tgz" | wc -l && echo "---------------------------------------------------" && echo "Total Size:::" && du -cksh /etc/verdaccio/storage && echo "---------------------------------------------------" && echo "---------------------------------------------------" && echo "Total Files in REMI:::" && find /opt/repo/remi* -type f | wc -l && echo "Total Size of REMI:::" && du -cksh /opt/repo/otherrepo && echo "---------------------------------------------------" '
watch -d ' echo "---------------------------------------------------" && echo "Total Modules:::" && find $directory -maxdepth 1 -type d | wc -l && echo "---------------------------------------------------" && echo "Total Packages:::" && find $directory -iname "*.tgz" | wc -l && echo "---------------------------------------------------" && echo "Total Size:::" && du -cksh $directory && echo "---------------------------------------------------" && echo "---------------------------------------------------" && echo "Total Files in REMI:::" && find /opt/repo/remi* -type f | wc -l && echo "Total Size of REMI:::" && du -cksh /opt/repo/otherrepo && echo "---------------------------------------------------" '


directory="/home/ambrose/Downloads/verdaccio/storage"
watch -d ' echo "---------------------------------------------------" && echo "Total Modules:::" && find $directory -maxdepth 1 -type d | wc -l && echo "---------------------------------------------------" && echo "Total Packages:::" && find $directory -iname "*.tgz" | wc -l && echo "---------------------------------------------------" && echo "Total Size:::" && du -cksh $directory && echo "---------------------------------------------------" '



###########################
# reposyncing
for i in $(cat repolist ); do reposync --repoid="$i" --download-metadata --download_path=/root/remi/"$i" ; done
for i in $(cat repolist ); do reposync --repoid="$i" --download-metadata --download_path=/root/remi/"$i" ; done


###########################
# getting all the javascript modules
#for i in $(ls); do cd /home/javascript/node_modules/"$i" && npm i --force && npm audit fix --force && cd ../ && rm -rf /home/javascript/node_modules/"$i"/node_modules ; done
for i in $(ls); do cd /opt/repo/javascript/gits/"$i" && npm install --force && cd /opt/repo/javascript/gits/ ;  done

for i in $(ls $(pwd)/*); do cd "$i" && npm i --force && npm audit fix --force && cd ../ && rm -rf "$i"/node_modules ; done

# getting all the javascript modules using pack???
for i in $(ls); do cd /opt/repo/javascript/node_modules/"$i" && npm pack --force && npm audit fix --force && cd ../ && rm -rf /opt/repo/javascript/node_modules/"$i"/node_modules ; done

for i in $(ls $(pwd)/*); do cd "$i" && npm pack --force && npm audit fix --force && cd ../ && rm -rf "$i"/node_modules ; done

for i in $(find $(pwd) -maxdepth 1 -type d); do cd "$i" && npm pack --force && npm audit fix --force && cd "$i"/.. && rm -rf "$i"/node_modules ; done

###########################
# brings back absolute path
for i in $(find $(pwd) -maxdepth 1 -type d); do echo "$i"; done

# brings back absolute path
for i in $(find $(pwd) -maxdepth 1 -type d); do echo "$i"; done

for i in $(find $(pwd) -maxdepth 1 -type d); do cd "$i" && npm i --force && npm audit fix --force && cd "$i"/.. && rm -rf "$i"/node_modules ; done

###########################
#Grepping out a regex
for i in {a..z}; do grep "^$i" filesToDownload > "$i"ToDownload; done

###########################
# This dumb.  Just use fdupes
## diff directories
###diff -r --suppress-common-lines etc/verdaccio/storage/ /etc/verdaccio/storage/ >> verdaccio_diff_2021Jan25
#

# fdupes
fdupes -R <dir1> <dir2> >> duplicates


# Getting links from git configs
directory=$(pwd)
for i in $(find $(pwd) -maxdepth 1 -type d); do cd "$i" && git config -l >> $directory/gitLinks ; done
grep url $directory/gitLinks >> $directory/gitLinks_clean
cut -d "=" -f2  $directory/gitLinks_clean >> $directory/gitLinksClean
sort -u $directory/gitLinksClean > $directory/gitLinks_clean
mv -f $directory/gitLinks_clean $directory/gitLinks
rm -f $directory/gitLinksClean

#sed -i 's/https\:\/\/github.com\//git@github.com:/g' gitLinks
sed -i 's/git@github.com:/https\:\/\/github.com\//g' gitLinks

for i in $(cat gitLinks ); do npm pack git+"$i" ; done

# Get all of one type of module's modules
for i in verdaccio*; do cd "$i" && npm i --force && npm audi fix --force && cd /opt/repo/javascript/node_modules/ ; done
=======

# Useful to start a command from a directory.
directory=$(pwd)
for i in $directory/* ; do cd "$i" && npm i --force && npm audi fix --force && cd $directory/"$i" ; done

# Updating integrity hashes.
directory=$(pwd)
for i in ` ls $directory ` ; do npm info "$i" ; done

# Backing up files modified in last X days
# EXAMPLES
find $(pwd) -name "*.php" -mtime -14 -print | xargs tar cvf backup.tar

# only gets the files and not the parent directories. 
# Causes problems with multi directories
find $(pwd) -mtime -14 -type f -exec tar cvf backup.tar {} \;
 
=======
# only gets the files and not the parent directories.
# Causes problems with multi directories
find $(pwd) -mtime -14 -type f -exec tar cvf backup.tar {} \;

# find with a NOT
# not tested yet
find $(pwd) -name "*.7z"  ! -name '_.7z' -type f -mtime -10 -exec tar cvf backup.tar {} \;

# Backup all folders changed in the last X days
for i in * ; do find -type d -mtime -10 -exec tar cvf $directory/backup.tar {} \; ; done

=======

# Useful to start a command from a directory.
directory=$(pwd)
for i in $directory/* ; do cd "$i" && npm i --force && npm audi fix --force && cd $directory/"$i" ; done

# Backing up files modified in last X days
# EXAMPLES
find $(pwd) -name "*.php" -mtime -14 -print | xargs tar cvf backup.tar

# only gets the files and not the parent directories.
# Causes problems with multi directories
find $(pwd) -mtime -14 -type f -exec tar cvf backup.tar {} \;

# find with a NOT
# not tested yet
find $(pwd) -name "*.7z"  ! -name '_.7z' -type f -mtime -10 -exec tar cvf backup.tar {} \;

# Backup all folders changed in the last X days
for i in * ; do find -type d -mtime -10 -exec tar cvf $directory/backup.tar {} \; ; done

=======
# Backup all folders changed in the last X days
#for i in ` ls $directory | grep -v javascript | grep -v transfer | grep -v shares ` ; do find $directory/"$i" -type d -mtime -10 -exec tar cvf $directory/backup.tar {} \; ; done
for i in ` ls  | grep -v javascript | grep -v transfer | grep -v shares ` ; do find "$i" -type d -mtime -10 -exec tar cvf $directory/backup.tar {} \; ; done

# NPM search
npm search typescript --registry https://registry.npmjs.org/  -l --parseable | cut -f1 | sort -u

#### NPM for Windows
$npmFiles = "@apollo","@apollo-server","@apollo-micro-server","@babel","@docker","@elastic","@ember","@gatsby","@graphql","@graphql-tools","@gulp","@jetbrains","@kibana","@lerna","@logstash","@microsoft","@mongodb","@mui","@next","@next-js","@nextjs","@npm","@parcel","@razzle","@react","@searchkit","@types","@typescript","@verdaccio","@vscode","@webpack","@yarn","apollo","apollo-server","apollo-micro-server","aspnet","babel","bootstrap","code-server","cra-template","create-next-","create-react-","docker","ember","ember-cli","fontawesome","fortawesome","gatsby","gem","graphql","gulp","gyp","jetbrains","kestrel","lerna","materialui","mongo","mongodb","mui","next","next-js","nextjs","node-gyp","npm","parcel","rails","razzle","react","ruby","searchkit","skia","skiasharp","typescript","undefsafe","verdaccio","vscode","webpack","windows","yarn"

$npmFilesSearched = $npmFiles.foreach({$(npm search -p "$_")})
$npmFilesSearchedUnique = $($npmFilesSearched | sort | unique)
# $npmFilesSearchedUnique.foreach({npm install $($_.split(" ")[0])})
# When using a -p in the search:::
Write-Host "-------------------------------------------------------------------------------"
Write-Host "Downloading $($npmFilesSearchedUnique.count) packages. Not Including deps."
Write-Host "-------------------------------------------------------------------------------"
# $npmFilesSearchedUnique.foreach({npm install --legacy-peer-deps $($_.split("`t")[0])})

$npmFilesClean = $npmFilesSearchedUnique.foreach({$($_.split("`t")[0])})

npm install --legacy-peer-deps $npmFilesClean[0..200]
npm install --legacy-peer-deps $npmFilesClean[201..400]
npm install --legacy-peer-deps $npmFilesClean[401..600]
npm install --legacy-peer-deps $npmFilesClean[601..800]
npm install --legacy-peer-deps $npmFilesClean[801..1000]
npm install --legacy-peer-deps $npmFilesClean[1001..1200]
npm install --legacy-peer-deps $npmFilesClean[1201..1400]

# ------------------------------------------------------------

npm audit fix

npm audit fix -f

#` When using a -p in the search
# $npmFilesSearchedUnique.foreach({npm pack $($_.split(" ")[0])})
$npmFilesSearchedUnique.foreach({npm pack $($_.split("`t")[0])})
#` 

cd node_modules
$directory=$(pwd)
$folders = gci
$folders.foreach({cd $_.directory && npm i --legacy-peer-deps && npm audit fix --force })


# ------------------------------------------------------------
$(npm search searchkit).foreach({npm pack $($_.split(" ")[0])})

$Directory = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\node\\"

$npmFiles = $(gci -recurse . -Filter package.json)

# $npmFiles.foreach({cd $_.directory && npm pack })
$npmFiles.foreach({cd $_.directory && npm pack . })

$tgzFiles = $(gci -recurse . -Filter "*.tgz")
$tgzFiles.foreach({copy-item $_ -destination $Directory})

# npm audit fix --force 
# $(gci -recurse . -Filter package.json).foreach({cd $_.directory && npm pack . })

# ------------------------------------------------------------

$packageFiles = gci -recurse . -Filter package.json
$packageFiles.foreach({cd $_.directory && npm pack . })

$(gci -recurse "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\" -Filter "*.tgz").foreach({Move-Item $_ -destination "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\node\\"})


# DeDupe
$moved = gci "*.tgz" -Recurse -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Moved\\Node\\"
$toMove = gci -recurse "*.tgz" -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\Node\\"
# mkdir C:\Users\$env:USERNAME\Downloads\Staging
$staging = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\Node\\"
$count = 0
$leavingCount = 0
$toMove.foreach({if($_.name -notin $moved.Name){$count++ }})
$toMove.foreach({if($_.name -in $moved.Name){$leavingCount++ }})
write-host "Going to move $count packages"
write-host "$leavingCount duplicate packages"

# Move Files
$toMove.foreach({if($_.name -notin $moved.Name){move-item $_ $staging}})

# Hashing Files
$Directory = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\node"
get-filehash "$Directory\\*" | format-list | Out-File "$Directory\\..\\PRE_DTA_HASH_$(Get-Date -Format "yyyyMMdd")_node.txt"


# $Directory = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\Software"
# $toHash = gci -recurse -Path $Directory
# $toHash.foreach({Get-FileHash $_ | format-list | Out-File -Append "$Directory\\..\\PRE_DTA_HASH_$(Get-Date -Format "yyyyMMdd")_Software.txt"})

# ------------------------------------------------------------
# tar Commands
tar --strip-components 1 -xzvf <filename> -C /usr/
tar --strip-components 1 -xzvf node-v16* -C /usr/


yarn config set registry http://10.245.42.25:4873/
yarn config set unsafeHTTPWhiteList 10.245.42.25