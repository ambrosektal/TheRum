# docker run --rm --name nuget-server -p 5555:80 --env-file "C:\\Users\\$env:USERNAME\\Documents\\BaGet_Shared\\baget.env" -v "C:\\Users\\$env:USERNAME\\Documents\\BaGet_Shared:/var/baget" loicsharma/baget:latest


# ----------------------------------------------------------------------------
# $SearchFiles = "microsoft.aspnetcore*","microsoft.aspnet*","microsoft.powershell*","microsoft.net*","microsoft.dotnet*","powershell*","microsoft.entityframework*","microsoft*csharp*"
# $SearchFiles = "*csharp*","*omnisharp*","*roslyn*","*omnisharp*roslyn*","*roslyn*omnisharp*","*docker*","*helm*","*kube*","*vscode*","dotnet-symbol"
# $SearchFiles = "*csharp*","*database*","*docker*","*dotnet*","*git*","*gitlab*","*helm*","*kube*","*kubectl*","*kubernetes*","*mongo*","*mongodb*","*Node*","*powershell*","*prometheus*","*skia*","*skiasharp*","*template*","*terminal*","*vscode*","*windows*terminal*","*wsl*","*aspnet*","Humanizer.Core*","Microsoft.AspNetCore.Spa*","Microsoft.AspNetCore.SpaTemplates","microsoft.dotnet*","microsoft.entityframework*","microsoft.net*","Microsoft.powershell*","mongocsharpdriver","MongoDB.Bson","MongoDB.Driver","MongoDB.Driver.Core","MongoDB.Driver.GridFS","MongoDB.Libmongocrypt","MongoDB*","redis*","RestSharp*","runtime.*.Netcore*","runtime.*.runtime*","*omnisharp*"

$SearchFiles = "*apm*","*appwork*","*argon*","*AspStudio*","*Auth0.AuthenticationApi*","*Auth0.Core*","*AuthorizeNet*","*backbone*","*beat*","*bootstrap*","*Breeze*","*cake*","*certificate*","*CloudNative.CloudEvents*","*connector*","*csharp*","*database*","*docker*","*dotnet*","*elastic*apm*","*emberjs*","*git*","*gitlab*","*helm*","*homer*","*jdbc*","*kibana*apm*","*knockout*","*kube*","*kubectl*","*kubernetes*","*logstash*apm*","*mattermost*","*metrica*","*Microsoft.Net.Compilers.Toolset*","*Microsoft.VisualStudio.mageCatalog*","*Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime*","*Microsoft.VisualStudio.Imaging*","*Microsoft.VisualStudio.OLE.Interop*","*Microsoft.VisualStudio.SDK.Analyzers*","*Microsoft.VisualStudio.SDK.EmbedInteropTypes*","*Microsoft.VisualStudio.Shell.Framework*","*Microsoft.VisualStudio.Shell**","*Microsoft.VisualStudio.TextManager.Interop*","*Microsoft.VisualStudio.Utilities*","*mongo*","*mongodb*","*mono*","*MSBuild.Sdk.Extras*","*Node*","*nosql*","*odbc*","*OpenTelemetry*","*powershell*","*prometheus*","*skia*","*skiasharp*","*Skote*","*SmartAdmin*","*sql*","*sqlserver*","*template*","*terminal*","*towel*","*typescript*","*Veltrix*","*vscode*","*windows*terminal*","*wsl*","aspnet*","FluentEmail*","FluentValidation*","Hangfire*","Humanizer.Core*","Insight.Database*","Json.NET*","LazyCache*","Microsoft.AspNetCore.Spa*","Microsoft.AspNetCore.SpaTemplates","microsoft.dotnet*","microsoft.entityframework*","microsoft.net*","Microsoft.NETCore.App.Runtime.Mono.browser-wasm","Microsoft.NETCore.App.Runtime.Mono*","microsoft.netcore.app.untime*","Microsoft.powershell*","mongocsharpdriver","MongoDB.Bson","MongoDB.Driver","MongoDB.Driver.Core","MongoDB.Driver.GridFS","MongoDB.Libmongocrypt","MongoDB*","NUnit*","redis*","RestSharp*","runtime.*.Netcore*","runtime.*.runtime*","Serilog*","System.componentModel*","System.ext*","System.Windows.Extensions*","dotnet-symbol"

$NuGetBinary = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\nuget.exe"

Remove-Variable files
$files = New-Object System.Collections.ArrayList

# $files.add($SearchFiles.foreach({ $(find-package $_ ).name }))
$files.add($SearchFiles.foreach({ $((find-package $_) | where-object {$_.Name -notlike "*arm64*"}).name }))

# ((find-package "*net.runtime*") | where-object {$_.Name -notlike "*arm64*"}).name

$uniqueFiles = $files | Sort-Object | Get-unique
$uniqueFiles = $uniqueFiles | Sort-Object | Get-unique
$uniqueFiles = $uniqueFiles | Sort-Object | Get-unique
$uniqueFiles = $uniqueFiles | Sort-Object | Get-unique

Write-Host "$($uniqueFiles.Count) packages to be installed. This does not include dependencies." -ForegroundColor Green

$uniqueFiles.foreach({ 
    try {
        # ((find-package "runtime.*").name).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # ((find-package "runtime.*runtime*").name).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # ((find-package "runtime.*Microsoft*").name).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # ((find-package "*kube*"  ).name | Sort-Object | Get-Unique).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # ((find-package "*kube*"  ).name | Sort-Object | Get-Unique).foreach({save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" -Source "BaGet"})
        # & $NuGetBinary install $_ -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"
        & $NuGetBinary install -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" $_ -Source "BaGet"
    }
    catch {
        # save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" 
        save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" -Source "BaGet"
    }
    finally {
        dotnet tool install --tool-path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" --add-source "BaGet" $_
    }
    # finally {
    #     # save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" 
    #     & $NuGetBinary install -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" $_ 
    # }
    # & $NuGetBinary install -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" $_ -Source "BaGet"
    
    # save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" -Source "BaGet"
    
    # dotnet tool install --tool-path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" --add-source "BaGet" $_
})


$uniqueFiles.foreach({ 
    try {
        # ((find-package "runtime.*").name).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # ((find-package "runtime.*runtime*").name).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # ((find-package "runtime.*Microsoft*").name).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # ((find-package "*kube*"  ).name | Sort-Object | Get-Unique).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # ((find-package "*kube*"  ).name | Sort-Object | Get-Unique).foreach({save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" -Source "BaGet"})
        # & $NuGetBinary install $_ -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"
        & $NuGetBinary install -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" $_ -Source "BaGet_Posh"
    }
    catch {
        # save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" 
        save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" -Source "BaGet_Posh" -MaximumVersion 100
    }
    finally {
        dotnet tool install --tool-path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" --add-source "BaGet_Posh" $_
    }
    # finally {
    #     # save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" 
    #     & $NuGetBinary install -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" $_ 
    # }
    # & $NuGetBinary install -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" $_ -Source "BaGet_Posh"
    
    # save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" -Source "BaGet_Posh"
    
    # dotnet tool install --tool-path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" --add-source "BaGet_Posh" $_
})

# $uniqueFiles.foreach({ 
#         dotnet tool install $_ --tool-path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"
# })


# $uniqueFiles.foreach({ & save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"})

# ----------------------------------------------------------------------------

# $(gci -recurse . -Filter "*.nupkg").foreach({move-item $_ -destination "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\"})

# DeDupe
$moved = gci "*.nupkg" -Recurse -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Moved\\nupkg\\"
$toMove = gci -recurse "*.nupkg" -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"
# $toMove = gci -recurse "*.nupkg"
# $toMove = $moved
# # Testing methods of reading this json
# $moved | ConvertTo-Json | Out-File -FilePath "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalMovedFileCheck.json"
# $toMove | ConvertTo-Json |  Out-File -FilePath "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalToMoveFileCheck.json"

if (Test-Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalMovedFileCheck.json") {
    $ImportedMoved = Get-Content -Raw -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalMovedFileCheck.json" | ConvertFrom-Json    
}

# mkdir C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging
$staging = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\nupkg\\"
$count = 0
$leavingCount = 0
$toMove.foreach({if($_.name -notin $moved.Name){$count++ }})
$toMove.foreach({if($_.name -in $moved.Name){$leavingCount++ }})
write-host "Going to move $count packages"
write-host "$leavingCount duplicate packages"

# Move Files
# $toMove.foreach({if($_.name -notin $moved.Name){move-item $_ $staging}})
if(!$ImportedMoved){
    $toMove.foreach({if($_.name -notin $moved.Name){move-item $_ $staging}})    
} else {
    $toMove.foreach({if($_.name -notin $moved.Name -or $_.name -notin $($ImportedMoved).Name){move-item $_ $staging}})
}


# get-filehash * | format-list | Out-File "..\\PRE_HASH_$(Get-Date -Format "yyyyMMdd")_nupkg.txt"

$Directory = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\nupkg"
get-filehash "$Directory\\*" | format-list | Out-File "$Directory\\..\\PRE_HASH_$(Get-Date -Format "yyyyMMdd")_nupkg.txt"




