$files = "MongoDB.Bson","MongoDB.Driver.Core","MongoDB.Driver","MongoDB.Libmongocrypt","mongocsharpdriver","MongoDB.Driver.GridFS"

$files = "RestSharp","Json.NET","Serilog","NUnit","Insight.Database","FluentValidation","Noda Time","FluentEmail","Hangfire","LazyCache"

foreach($file in $files){nuget install $file -OutputDirectory .}

# ----------------------------------------------------------------------------
$NuGetBinary = "C:\\Users\\$env:USERNAME\\Downloads\\nuget.exe"

$files = & $NuGetBinary search powershell

$($files.split("> ").foreach({$_.split(" ")[0]}) | sort | unique).foreach({& $NuGetBinary  install $_ -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"})

# ----------------------------------------------------------------------------

$SearchFiles = "RestSharp","Json.NET","Serilog","NUnit","Insight.Database","FluentValidation","Noda Time","FluentEmail","Hangfire","LazyCache","wsl","aspnetcore","microsoft.entityframeworkcore","System.componentModel"

$NuGetBinary = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\nuget.exe"

Remove-Variable files
$files = New-Object System.Collections.ArrayList

# $files.add($SearchFiles.foreach({ & $NuGetBinary search $_ }))
$files = & $NuGetBinary search verdaccio

# $files.foreach({ & save-package winget -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" })

$($files.split("> ").foreach({$_.split(" ")[0]}) | sort | unique).foreach({& $NuGetBinary install $_ -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" })

$($files.split("> ").foreach({$_.split(" ")[0]}) | sort | unique).foreach({& save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" })

# ----------------------------------------------------------------------------
$NuGetBinary = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\nuget.exe"

$SearchFiles = "RestSharp*","Json.NET*","Serilog*","NUnit*","Insight.Database*","FluentValidation*","Noda Time*","FluentEmail*","Hangfire*","LazyCache*","*wsl*","aspnet*","microsoft.entityframework*","System.componentModel*","microsoft.net*","microsoft.dotnet*","MongoDB.Bson","MongoDB.Driver.Core","MongoDB.Driver","MongoDB.Libmongocrypt","mongocsharpdriver","MongoDB.Driver.GridFS","MongoDB*","System.Text*","System.Windows.Extensions*","Humanizer.Core*", "redis*","*dotnet*","*cake*","*Node*","*database*","*sqlserver*","*nosql*","*sql*","*docker*","*kubernetes*","*helm*","*mattermost*","*gitlab*","*git*","*typescript*","*skiasharp*","*skia*","*vscode*"
# $SearchFiles = "*helm*","*mattermost*","*gitlab*","*skiasharp*","*skia*"
# $SearchFiles = "MonoGame.Framework.Redpoint","Microsoft.AspNetCore.SpaTemplates","UncommonSense.CBreeze.Automation","Microsoft.NETCore.App.Runtime.Mono.browser-wasm","MonoGame.Templates.CSharp","Microsoft.AspNetCore.SpaTemplates","Microsoft.NETCore.App.Runtime.Mono*"
$SearchFiles = "Microsoft.AspNetCore.Spa*","*Skote*","*backbone*","*Breeze*","*emberjs*","*towel*","*Veltrix*","*SmartAdmin*","*metrica*","*AspStudio*","*appwork*","*homer*","*mono*","*argon*","*knockout*","*template*"

$NuGetBinary = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\nuget.exe"

Remove-Variable files
$files = New-Object System.Collections.ArrayList

$files.add($SearchFiles.foreach({ $(find-package $_ ).name }))

$uniqueFiles = $files | Sort-Object | Get-unique

Write-Host "$($uniqueFiles.Count) packages to be installed. This does not include dependencies." -ForegroundColor Green

$uniqueFiles.foreach({ 
    try {
        & $NuGetBinary install $_ -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" 
    }
    catch {
        save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"
    }
    finally {
        dotnet tool install $_ --tool-path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"
    }
})

# $uniqueFiles.foreach({ 
#         dotnet tool install $_ --tool-path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"
# })


# $uniqueFiles.foreach({ & save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"})

# ----------------------------------------------------------------------------

# $(gci -recurse . -Filter "*.nupkg").foreach({move-item $_ -destination "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\"})

# DeDupe
$moved = gci "*.nupkg" -Recurse -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Moved\\nupkg\\"
$toMove = gci -recurse "*.nupkg" -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"

# # Testing methods of reading this json
# $moved | ConvertTo-Json | Out-File -FilePath "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalMovedFileCheck.json"
# $toMove | ConvertTo-Json |  Out-File -FilePath "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalToMoveFileCheck.json"

if (Test-Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalMovedFileCheck.json") {
    $ImportedMoved = Get-Content -Raw -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalMovedFileCheck.json" | ConvertFrom-Json    
}

# mkdir C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging
$staging = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\nupkg\\"
$count = 0
$leavingCount = 0
$toMove.foreach({if($_.name -notin $moved.Name){$count++ }})
$toMove.foreach({if($_.name -in $moved.Name){$leavingCount++ }})
write-host "Going to move $count packages"
write-host "$leavingCount duplicate packages"

# Move Files
# $toMove.foreach({if($_.name -notin $moved.Name){move-item $_ $staging}})
if(!$ImportedMoved){
    $toMove.foreach({if($_.name -notin $moved.Name){move-item $_ $staging}})    
} else {
    $toMove.foreach({if($_.name -notin $moved.Name -or $_.name -notin $($ImportedMoved).Name){move-item $_ $staging}})
}


# get-filehash * | format-list | Out-File "..\\PRE_DTA_HASH_$(Get-Date -Format "yyyyMMdd")_nupkg.txt"

$Directory = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\nupkg"
get-filehash "$Directory\\*" | format-list | Out-File "$Directory\\..\\PRE_DTA_HASH_$(Get-Date -Format "yyyyMMdd")_nupkg.txt"



