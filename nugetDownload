# ----------------------------------------------------------------------------
# $SearchFiles = "RestSharp*","Json.NET*","Serilog*","NUnit*","Insight.Database*","FluentValidation*","Noda Time*","FluentEmail*","Hangfire*","LazyCache*","*wsl*","aspnet*","microsoft.entityframework*","System.componentModel*","microsoft.net*","microsoft.dotnet*","MongoDB.Bson","MongoDB.Driver.Core","MongoDB.Driver","MongoDB.Libmongocrypt","mongocsharpdriver","MongoDB.Driver.GridFS","MongoDB*","System.Text*","System.Windows.Extensions*","Humanizer.Core*", "redis*","*dotnet*","*cake*","*Node*","*database*","*sqlserver*","*nosql*","*sql*","*docker*","*kubernetes*","*helm*","*mattermost*","*gitlab*","*git*","*typescript*","*skiasharp*","*skia*","*vscode*"
# $SearchFiles = "*helm*","*mattermost*","*gitlab*","*skiasharp*","*skia*"
# $SearchFiles = "MonoGame.Framework.Redpoint","Microsoft.AspNetCore.SpaTemplates","UncommonSense.CBreeze.Automation","Microsoft.NETCore.App.Runtime.Mono.browser-wasm","MonoGame.Templates.CSharp","Microsoft.AspNetCore.SpaTemplates","Microsoft.NETCore.App.Runtime.Mono*"
# $SearchFiles = "Microsoft.AspNetCore.Spa*","*Skote*","*backbone*","*Breeze*","*emberjs*","*towel*","*Veltrix*","*SmartAdmin*","*metrica*","*AspStudio*","*appwork*","*homer*","*mono*","*argon*","*knockout*","*template*"
# $SearchFiles = "Microsoft.AspNetCore.SpaTemplates","Microsoft.NETCore.App.Runtime.Mono.browser-wasm","MonoGame.Templates.CSharp","Microsoft.NETCore.App.Runtime.Mono","*net*.runtime*"

$SearchFiles = "*appwork*","*argon*","*AspStudio*","*Atlassian.SDK*","*Auth0.AuthenticationApi*","*Auth0.Core*","*AuthorizeNet*","*backbone*","*Breeze*","*cake*","*certificate*","*CloudNative.CloudEvents*","*connector*","*CouchbaseNetClient*","*database*","*docker*","*dotnet*","*emberjs*","*envdte*","*git*","*gitlab*","*helm*","*Hl7.FhirPath*","*homer*","*itext7*","*jdbc*","*knockout*","*kubernetes*","*LaunchDarkly.CommonSdk*","*LaunchDarkly.ServerSdk*","*mattermost*","*metrica*","*Microsoft.Bot.Builder.Integration.AspNet.Core*","*Microsoft.Bot.Streaming*","*Microsoft.CrmSdk.Workflow*","*Microsoft.Extensions.Logging.Abstractions*","*Microsoft.Net.Compilers.Toolset*","*Microsoft.VisualStudio.ImageCatalog*","*Microsoft.VisualStudio.Imaging.Interop.14.0.DesignTime*","*Microsoft.VisualStudio.Imaging*","*Microsoft.VisualStudio.OLE.Interop*","*Microsoft.VisualStudio.SDK.Analyzers*","*Microsoft.VisualStudio.SDK.EmbedInteropTypes*","*Microsoft.VisualStudio.Shell.Framework*","*Microsoft.VisualStudio.Shell**","*Microsoft.VisualStudio.TextManager.Interop*","*Microsoft.VisualStudio.Utilities*","*Minio*","*mongo*","*mongodb*","*mono*","*MSBuild.Sdk.Extras*","*Node*","*nosql*","*odbc*","*OpenTelemetry*","*skia*","*skiasharp*","*Skote*","*SmartAdmin*","*sql*","*sqlserver*","*stdole*","*template*","*terminal*","*towel*","*typescript*","*Veltrix*","*vscode*","*vswhere*","*windows*terminal*","*wsl*","aspnet*","FluentEmail*","FluentValidation*","Hangfire*","Humanizer.Core*","Insight.Database*","Json.NET*","LazyCache*","Microsoft.AspNetCore.Spa*","Microsoft.AspNetCore.SpaTemplates","microsoft.dotnet*","microsoft.entityframework*","microsoft.net*","Microsoft.NETCore.App.Runtime.Mono.browser-wasm","Microsoft.NETCore.App.Runtime.Mono*","mongocsharpdriver","MongoDB.Bson","MongoDB.Driver","MongoDB.Driver.Core","MongoDB.Driver.GridFS","MongoDB.Libmongocrypt","MongoDB*","MonoGame.Framework.Redpoint","MonoGame.Templates.CSharp","Noda Time*","NUnit*","redis*","RestSharp*","Serilog*","System.componentModel*","System.Text*","System.Windows.Extensions*","UncommonSense.CBreeze.Automation","*bootstrap*","*prometheus*","*apm*","*elastic*apm*","*logstash*apm*","*kibana*apm*","*beat*","runtime.*.native*","runtime.*.Netcore*","runtime.*.runtime*"

$SearchFiles = "runtime.*.native*","runtime.*.Netcore*","runtime.*.runtime*"

$NuGetBinary = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\nuget.exe"

Remove-Variable files
$files = New-Object System.Collections.ArrayList

# $files.add($SearchFiles.foreach({ $(find-package $_ ).name }))
$files.add($SearchFiles.foreach({ $((find-package "*net.runtime*") | where-object {$_.Name -notlike "*arm64*"}).name }))

# ((find-package "*net.runtime*") | where-object {$_.Name -notlike "*arm64*"}).name

$uniqueFiles = $files | Sort-Object | Get-unique
$uniqueFiles = $uniqueFiles | Sort-Object | Get-unique
$uniqueFiles = $uniqueFiles | Sort-Object | Get-unique
$uniqueFiles = $uniqueFiles | Sort-Object | Get-unique

Write-Host "$($uniqueFiles.Count) packages to be installed. This does not include dependencies." -ForegroundColor Green

$uniqueFiles.foreach({ 
    try {
        # ((find-package "runtime.*").name).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # ((find-package "runtime.*runtime*").name).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # ((find-package "runtime.*Microsoft*").name).foreach({nuget install -outputdirectory C:\Users\joesp\Downloads\Transfer\ToMove\nupkg\ $_ -source "Baget"})
        # & $NuGetBinary install $_ -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"
        & $NuGetBinary install -OutputDirectory "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" $_ -Source "BaGet"
    }
    catch {
        # save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" 
        save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" -Source "BaGet"
    }
    # finally {
    #     dotnet tool install --tool-path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\" --add-source "BaGet" $_
    # }
})

# $uniqueFiles.foreach({ 
#         dotnet tool install $_ --tool-path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"
# })


# $uniqueFiles.foreach({ & save-package "$_" -path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"})

# ----------------------------------------------------------------------------

# $(gci -recurse . -Filter "*.nupkg").foreach({move-item $_ -destination "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\"})

# DeDupe
$moved = gci "*.nupkg" -Recurse -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Moved\\nupkg\\"
$toMove = gci -recurse "*.nupkg" -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ToMove\\nupkg\\"
# $toMove = gci -recurse "*.nupkg"
# $toMove = $moved
# # Testing methods of reading this json
# $moved | ConvertTo-Json | Out-File -FilePath "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalMovedFileCheck.json"
# $toMove | ConvertTo-Json |  Out-File -FilePath "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalToMoveFileCheck.json"

if (Test-Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalMovedFileCheck.json") {
    $ImportedMoved = Get-Content -Raw -Path "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\ExternalMovedFileCheck.json" | ConvertFrom-Json    
}

# mkdir C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging
$staging = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\nupkg\\"
$count = 0
$leavingCount = 0
$toMove.foreach({if($_.name -notin $moved.Name){$count++ }})
$toMove.foreach({if($_.name -in $moved.Name){$leavingCount++ }})
write-host "Going to move $count packages"
write-host "$leavingCount duplicate packages"

# Move Files
# $toMove.foreach({if($_.name -notin $moved.Name){move-item $_ $staging}})
if(!$ImportedMoved){
    $toMove.foreach({if($_.name -notin $moved.Name){move-item $_ $staging}})    
} else {
    $toMove.foreach({if($_.name -notin $moved.Name -or $_.name -notin $($ImportedMoved).Name){move-item $_ $staging}})
}


# get-filehash * | format-list | Out-File "..\\PRE_HASH_$(Get-Date -Format "yyyyMMdd")_nupkg.txt"

$Directory = "C:\\Users\\$env:USERNAME\\Downloads\\Transfer\\Staging\\nupkg"
get-filehash "$Directory\\*" | format-list | Out-File "$Directory\\..\\PRE_HASH_$(Get-Date -Format "yyyyMMdd")_nupkg.txt"




